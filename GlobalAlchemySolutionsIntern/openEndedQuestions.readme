1. Since sites are often viewed on many different sized screens or monitors, it's important that the website have a responsiveness that acts accordingly. Ways you can do this is by making the main information needing to be seen in the main column on the page. This would ensure that no important information is missed. This thought can be set up on the site by hiding or replacing any items of lesser priority. Sizing of images also need to be accounted for this reason as well. 
However, if the site requires, you can also develop a seperate mobile site to ensure the correct responsiveness needed. Some examples of such are banking sites like "USAA". The mobile site is seperate so that the mobile site can be navigated more efficently. 

2. One way to test the responsiveness of a site is to literally test the resonsiveness on different sized screens. However, this method is not practical as having multiple sized screens could get expensive really quickly.
Developers have modern browsers now, like Chrome, that have ways to check responsiveness built in. By right clicking on a webpage and clicking on Inspect, you can open the developer tools available. In the default view of the upper left hand corner, the second icon looks like two devices overlapping. This particular tool allows you to change the size of the screen the website will be viewed on to check its responsiveness during development and testing.

3. For basic text editing, I prefer to do my editing in NotePad++ as it is very streamlined, but easy to manipulate between languages. 
For an IDE, I prefer VSCode because it allows you to set up particular rules or preferences and even "lint" to help you design your code the way you choose. Also VSCode gives easy access to a terminal within it so it can be readily available for downloading web packages and source controlling with Git.

4. My most used shortcuts are crtl+c for copy and ctrl+p for paste. But the one I wish everyone knew was a way to highlight all of the text provided in the area by using crtl+a.

5.The latest book I have been reading is Javascript and JQuery: Interactive Front-End Web Development. So far, I have been using it to solodify some Javascipt/JQuery knowledge and I look forward to see the author's, Jon Duckett's, thoughts on making the frontend of projects interactive. (Only about half way through this particular read and open to suggestions on my next.)  

6. I worked with another API designed by the bootcamp course I took. This particular API was developed stictly for use for the school and we had the ability to "play" with it as we chose. It allowed us to practice API calls such as GET/PUT/POST/DELETE and when called, it pulled up information on "users" which were objects built from information like names, dates of birth, etc. 

7. Without utilizing cookies, there are several other options available for storing data on the client side. 
The first type is Web Storage. Like cookies, it stores simple values and key/value pairs in the browser for easy recall. However it differs in that is can handle larger amounts of data, it holds the data until it's explicitly removed by the user, and has more than one option for storing data: SessionStorage and LocalStorage. SessionStorage limits the amount of data being saved to show just the current web browser window, whereas LocalStorage will expand across multiple windows and browsers. 
There are also offline options for client side storage as well, such as an Application Cache. Currently every major web browser supports the Application Cache and for good reason as it uses a simple text document listing resource that tells the browsers what files to download, hold on to, and use instead of making multiple requests to the server for more information. 

8. For my example, I will use https://brigade.gg/ as the website. 
The first thing I would recommend is looking over the resonsiveness. Anything smaller than 320 by 568 has a white margin showing and no longer fills the screen appropriately, as seen in the Chrome DevTools. This could be adjusted by centering or filling the background with the selected background colors in CSS.
Another item in responsiveness that would make the site more attractive is the menu. When the menu is clicked in mobile view, the items available to click on are justified to the left. Making the items justified to the right would allow the user the ability to manuever more easily to the menu item they wanted to click. 
My final suggestion is totally a personal preference, but I never recommend using slang terms for "important" information listed. The owner decided to use the term "Commo" instead of Communcation or Community or Comms. I'm actually not quite sure what they meant to put, but making sure everything is labeled correctly for easy access to reaching your business is very important as your website may be their first impression of you.